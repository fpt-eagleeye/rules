rule elf_mirai_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-05-30"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.4.0"
        tool_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/elf.mirai"
        malpedia_rule_date = "20200529"
        malpedia_hash = "92c362319514e5a6da26204961446caa3a8b32a8"
        malpedia_version = "20200529"
        malpedia_license = "CC BY-NC-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using yara-signator.
     * The code and documentation / approach is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c1ea02 8d1492 29d0 83f804 }
            // n = 4, score = 300
            //   c1ea02               | je                  0x1bf3
            //   8d1492               | sub                 esp, 0xc
            //   29d0                 | mov                 edi, dword ptr [esp + 0x3c]
            //   83f804               | dec                 eax

        $sequence_1 = { 89d0 c1e005 01d0 89ca }
            // n = 4, score = 300
            //   89d0                 | je                  0x3fa
            //   c1e005               | cmp                 al, 0x3a
            //   01d0                 | jne                 0x42b
            //   89ca                 | test                al, al

        $sequence_2 = { 66c1e808 d0e8 8d04c0 28c2 }
            // n = 4, score = 300
            //   66c1e808             | push                ebx
            //   d0e8                 | lea                 edx, [esp + 0x1027]
            //   8d04c0               | lea                 eax, [edx + eax]
            //   28c2                 | push                eax

        $sequence_3 = { c7433400000000 894330 c6433801 c6433903 }
            // n = 4, score = 300
            //   c7433400000000       | mov                 ebx, eax
            //   894330               | mov                 dword ptr [eax], 0
            //   c6433801             | push                eax
            //   c6433903             | lea                 esi, [esi]

        $sequence_4 = { c7433400000000 894330 c6433801 c6433903 c6433a03 c6433b06 }
            // n = 6, score = 300
            //   c7433400000000       | lea                 eax, [ebx + edx]
            //   894330               | mov                 ebx, dword ptr [esp + 0x878]
            //   c6433801             | inc                 ebx
            //   c6433903             | mov                 word ptr [eax + 2], 0x100
            //   c6433a03             | mov                 word ptr [eax + 4], 0x100
            //   c6433b06             | mov                 edx, dword ptr [esp + 0x40]

        $sequence_5 = { 6689432a e8???????? c7433400000000 894330 }
            // n = 4, score = 300
            //   6689432a             | push                eax
            //   e8????????           |                     
            //   c7433400000000       | push                3
            //   894330               | push                0

        $sequence_6 = { c7433400000000 894330 c6433801 c6433903 c6433a03 }
            // n = 5, score = 300
            //   c7433400000000       | mov                 eax, dword ptr [esp + 0x56]
            //   894330               | test                al, 4
            //   c6433801             | nop                 
            //   c6433903             | jne                 0x1cbf
            //   c6433a03             | test                al, 1

        $sequence_7 = { 66c1c808 807c242b00 66894304 7406 66c743064000 c643092f }
            // n = 6, score = 300
            //   66c1c808             | lea                 edx, [esp + 0x1030]
            //   807c242b00           | xor                 eax, eax
            //   66894304             | push                eax
            //   7406                 | push                ebp
            //   66c743064000         | push                edx
            //   c643092f             | add                 esp, 0x10

        $sequence_8 = { e8???????? c7433400000000 894330 c6433801 c6433903 c6433a03 c6433b06 }
            // n = 7, score = 300
            //   e8????????           |                     
            //   c7433400000000       | movzx               edx, byte ptr [esp + 0xf]
            //   894330               | mov                 edx, 3
            //   c6433801             | mov                 edi, eax
            //   c6433903             | mov                 dword ptr [esp + 0x84], 1
            //   c6433a03             | inc                 eax
            //   c6433b06             | je                  0x1195

        $sequence_9 = { 894330 c6433801 c6433903 c6433a03 c6433b06 }
            // n = 5, score = 300
            //   894330               | sub                 ebx, 2
            //   c6433801             | shl                 edx, 0xb
            //   c6433903             | xor                 edx, eax
            //   c6433a03             | mov                 eax, esi
            //   c6433b06             | shr                 eax, 0x13

    condition:
        7 of them and filesize &lt; 131728
}